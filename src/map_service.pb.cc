// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_service.proto

#include "map_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace robot {
namespace map {
PROTOBUF_CONSTEXPR MapRequest::MapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapRequestDefaultTypeInternal() {}
  union {
    MapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapRequestDefaultTypeInternal _MapRequest_default_instance_;
PROTOBUF_CONSTEXPR MapResponse::MapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapResponseDefaultTypeInternal() {}
  union {
    MapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapResponseDefaultTypeInternal _MapResponse_default_instance_;
PROTOBUF_CONSTEXPR MapChunk::MapChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_id_)*/0
  , /*decltype(_impl_.last_chunk_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapChunkDefaultTypeInternal() {}
  union {
    MapChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapChunkDefaultTypeInternal _MapChunk_default_instance_;
}  // namespace map
}  // namespace robot
static ::_pb::Metadata file_level_metadata_map_5fservice_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_map_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_map_5fservice_2eproto = nullptr;

const uint32_t TableStruct_map_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot::map::MapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::map::MapRequest, _impl_.map_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot::map::MapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::map::MapResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot::map::MapChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot::map::MapChunk, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::robot::map::MapChunk, _impl_.chunk_id_),
  PROTOBUF_FIELD_OFFSET(::robot::map::MapChunk, _impl_.last_chunk_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::robot::map::MapRequest)},
  { 7, -1, -1, sizeof(::robot::map::MapResponse)},
  { 14, -1, -1, sizeof(::robot::map::MapChunk)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::robot::map::_MapRequest_default_instance_._instance,
  &::robot::map::_MapResponse_default_instance_._instance,
  &::robot::map::_MapChunk_default_instance_._instance,
};

const char descriptor_table_protodef_map_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021map_service.proto\022\trobot.map\"\034\n\nMapReq"
  "uest\022\016\n\006map_id\030\001 \001(\t\"\036\n\013MapResponse\022\017\n\007m"
  "essage\030\001 \001(\t\">\n\010MapChunk\022\014\n\004data\030\001 \001(\014\022\020"
  "\n\010chunk_id\030\002 \001(\005\022\022\n\nlast_chunk\030\003 \001(\0102\200\001\n"
  "\nMapService\0227\n\006GetMap\022\025.robot.map.MapReq"
  "uest\032\026.robot.map.MapResponse\0229\n\tStreamMa"
  "p\022\025.robot.map.MapRequest\032\023.robot.map.Map"
  "Chunk0\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_map_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_map_5fservice_2eproto = {
    false, false, 295, descriptor_table_protodef_map_5fservice_2eproto,
    "map_service.proto",
    &descriptor_table_map_5fservice_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_map_5fservice_2eproto::offsets,
    file_level_metadata_map_5fservice_2eproto, file_level_enum_descriptors_map_5fservice_2eproto,
    file_level_service_descriptors_map_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_map_5fservice_2eproto_getter() {
  return &descriptor_table_map_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_map_5fservice_2eproto(&descriptor_table_map_5fservice_2eproto);
namespace robot {
namespace map {

// ===================================================================

class MapRequest::_Internal {
 public:
};

MapRequest::MapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.map.MapRequest)
}
MapRequest::MapRequest(const MapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_id().empty()) {
    _this->_impl_.map_id_.Set(from._internal_map_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:robot.map.MapRequest)
}

inline void MapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.map_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapRequest::~MapRequest() {
  // @@protoc_insertion_point(destructor:robot.map.MapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_id_.Destroy();
}

void MapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.map.MapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "robot.map.MapRequest.map_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.map.MapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_id = 1;
  if (!this->_internal_map_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_id().data(), static_cast<int>(this->_internal_map_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "robot.map.MapRequest.map_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.map.MapRequest)
  return target;
}

size_t MapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.map.MapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_id = 1;
  if (!this->_internal_map_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRequest::GetClassData() const { return &_class_data_; }


void MapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapRequest*>(&to_msg);
  auto& from = static_cast<const MapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.map.MapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_id().empty()) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRequest::CopyFrom(const MapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.map.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRequest::IsInitialized() const {
  return true;
}

void MapRequest::InternalSwap(MapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_id_, lhs_arena,
      &other->_impl_.map_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5fservice_2eproto_getter, &descriptor_table_map_5fservice_2eproto_once,
      file_level_metadata_map_5fservice_2eproto[0]);
}

// ===================================================================

class MapResponse::_Internal {
 public:
};

MapResponse::MapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.map.MapResponse)
}
MapResponse::MapResponse(const MapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:robot.map.MapResponse)
}

inline void MapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapResponse::~MapResponse() {
  // @@protoc_insertion_point(destructor:robot.map.MapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void MapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.map.MapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "robot.map.MapResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.map.MapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "robot.map.MapResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.map.MapResponse)
  return target;
}

size_t MapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.map.MapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapResponse::GetClassData() const { return &_class_data_; }


void MapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapResponse*>(&to_msg);
  auto& from = static_cast<const MapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.map.MapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapResponse::CopyFrom(const MapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.map.MapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapResponse::IsInitialized() const {
  return true;
}

void MapResponse::InternalSwap(MapResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5fservice_2eproto_getter, &descriptor_table_map_5fservice_2eproto_once,
      file_level_metadata_map_5fservice_2eproto[1]);
}

// ===================================================================

class MapChunk::_Internal {
 public:
};

MapChunk::MapChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot.map.MapChunk)
}
MapChunk::MapChunk(const MapChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.chunk_id_){}
    , decltype(_impl_.last_chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chunk_id_, &from._impl_.chunk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_chunk_) -
    reinterpret_cast<char*>(&_impl_.chunk_id_)) + sizeof(_impl_.last_chunk_));
  // @@protoc_insertion_point(copy_constructor:robot.map.MapChunk)
}

inline void MapChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.chunk_id_){0}
    , decltype(_impl_.last_chunk_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MapChunk::~MapChunk() {
  // @@protoc_insertion_point(destructor:robot.map.MapChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MapChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:robot.map.MapChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_chunk_) -
      reinterpret_cast<char*>(&_impl_.chunk_id_)) + sizeof(_impl_.last_chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 chunk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool last_chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot.map.MapChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int32 chunk_id = 2;
  if (this->_internal_chunk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_chunk_id(), target);
  }

  // bool last_chunk = 3;
  if (this->_internal_last_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_last_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot.map.MapChunk)
  return target;
}

size_t MapChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot.map.MapChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 chunk_id = 2;
  if (this->_internal_chunk_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chunk_id());
  }

  // bool last_chunk = 3;
  if (this->_internal_last_chunk() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapChunk::GetClassData() const { return &_class_data_; }


void MapChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapChunk*>(&to_msg);
  auto& from = static_cast<const MapChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot.map.MapChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_chunk_id() != 0) {
    _this->_internal_set_chunk_id(from._internal_chunk_id());
  }
  if (from._internal_last_chunk() != 0) {
    _this->_internal_set_last_chunk(from._internal_last_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapChunk::CopyFrom(const MapChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot.map.MapChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapChunk::IsInitialized() const {
  return true;
}

void MapChunk::InternalSwap(MapChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapChunk, _impl_.last_chunk_)
      + sizeof(MapChunk::_impl_.last_chunk_)
      - PROTOBUF_FIELD_OFFSET(MapChunk, _impl_.chunk_id_)>(
          reinterpret_cast<char*>(&_impl_.chunk_id_),
          reinterpret_cast<char*>(&other->_impl_.chunk_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_map_5fservice_2eproto_getter, &descriptor_table_map_5fservice_2eproto_once,
      file_level_metadata_map_5fservice_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace map
}  // namespace robot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::robot::map::MapRequest*
Arena::CreateMaybeMessage< ::robot::map::MapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::map::MapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::map::MapResponse*
Arena::CreateMaybeMessage< ::robot::map::MapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::map::MapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::robot::map::MapChunk*
Arena::CreateMaybeMessage< ::robot::map::MapChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot::map::MapChunk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
