// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: map_service.proto
#ifndef GRPC_map_5fservice_2eproto__INCLUDED
#define GRPC_map_5fservice_2eproto__INCLUDED

#include "map_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace robot {
namespace map {

class MapService final {
 public:
  static constexpr char const* service_full_name() {
    return "robot.map.MapService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Unary RPC
    virtual ::grpc::Status GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::robot::map::MapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot::map::MapResponse>> AsyncGetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot::map::MapResponse>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot::map::MapResponse>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::robot::map::MapResponse>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    // Server streaming RPC
    std::unique_ptr< ::grpc::ClientReaderInterface< ::robot::map::MapChunk>> StreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::robot::map::MapChunk>>(StreamMapRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::robot::map::MapChunk>> AsyncStreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::robot::map::MapChunk>>(AsyncStreamMapRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::robot::map::MapChunk>> PrepareAsyncStreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::robot::map::MapChunk>>(PrepareAsyncStreamMapRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Unary RPC
      virtual void GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Server streaming RPC
      virtual void StreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::grpc::ClientReadReactor< ::robot::map::MapChunk>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot::map::MapResponse>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::robot::map::MapResponse>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::robot::map::MapChunk>* StreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::robot::map::MapChunk>* AsyncStreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::robot::map::MapChunk>* PrepareAsyncStreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::robot::map::MapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>> AsyncGetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::robot::map::MapChunk>> StreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::robot::map::MapChunk>>(StreamMapRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::robot::map::MapChunk>> AsyncStreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::robot::map::MapChunk>>(AsyncStreamMapRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::robot::map::MapChunk>> PrepareAsyncStreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::robot::map::MapChunk>>(PrepareAsyncStreamMapRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::grpc::ClientReadReactor< ::robot::map::MapChunk>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::robot::map::MapChunk>* StreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request) override;
    ::grpc::ClientAsyncReader< ::robot::map::MapChunk>* AsyncStreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::robot::map::MapChunk>* PrepareAsyncStreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMap_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamMap_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Unary RPC
    virtual ::grpc::Status GetMap(::grpc::ServerContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response);
    // Server streaming RPC
    virtual ::grpc::Status StreamMap(::grpc::ServerContext* context, const ::robot::map::MapRequest* request, ::grpc::ServerWriter< ::robot::map::MapChunk>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMap() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::robot::map::MapRequest* request, ::grpc::ServerAsyncResponseWriter< ::robot::map::MapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamMap() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::grpc::ServerWriter< ::robot::map::MapChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMap(::grpc::ServerContext* context, ::robot::map::MapRequest* request, ::grpc::ServerAsyncWriter< ::robot::map::MapChunk>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMap<WithAsyncMethod_StreamMap<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::robot::map::MapRequest, ::robot::map::MapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response) { return this->GetMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetMap(
        ::grpc::MessageAllocator< ::robot::map::MapRequest, ::robot::map::MapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::robot::map::MapRequest, ::robot::map::MapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamMap() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::robot::map::MapRequest, ::robot::map::MapChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::robot::map::MapRequest* request) { return this->StreamMap(context, request); }));
    }
    ~WithCallbackMethod_StreamMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::grpc::ServerWriter< ::robot::map::MapChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::robot::map::MapChunk>* StreamMap(
      ::grpc::CallbackServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetMap<WithCallbackMethod_StreamMap<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMap() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamMap() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::grpc::ServerWriter< ::robot::map::MapChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMap() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamMap() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::grpc::ServerWriter< ::robot::map::MapChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamMap() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamMap(context, request); }));
    }
    ~WithRawCallbackMethod_StreamMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::grpc::ServerWriter< ::robot::map::MapChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMap() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::robot::map::MapRequest, ::robot::map::MapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::robot::map::MapRequest, ::robot::map::MapResponse>* streamer) {
                       return this->StreamedGetMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::robot::map::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::robot::map::MapRequest,::robot::map::MapResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMap<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamMap() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::robot::map::MapRequest, ::robot::map::MapChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::robot::map::MapRequest, ::robot::map::MapChunk>* streamer) {
                       return this->StreamedStreamMap(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamMap(::grpc::ServerContext* /*context*/, const ::robot::map::MapRequest* /*request*/, ::grpc::ServerWriter< ::robot::map::MapChunk>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamMap(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::robot::map::MapRequest,::robot::map::MapChunk>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamMap<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMap<WithSplitStreamingMethod_StreamMap<Service > > StreamedService;
};

}  // namespace map
}  // namespace robot


#endif  // GRPC_map_5fservice_2eproto__INCLUDED
