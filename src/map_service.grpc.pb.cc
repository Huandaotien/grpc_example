// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: map_service.proto

#include "map_service.pb.h"
#include "map_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace robot {
namespace map {

static const char* MapService_method_names[] = {
  "/robot.map.MapService/GetMap",
  "/robot.map.MapService/StreamMap",
};

std::unique_ptr< MapService::Stub> MapService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapService::Stub> stub(new MapService::Stub(channel, options));
  return stub;
}

MapService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetMap_(MapService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamMap_(MapService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MapService::Stub::GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::robot::map::MapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::robot::map::MapRequest, ::robot::map::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void MapService::Stub::async::GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::robot::map::MapRequest, ::robot::map::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void MapService::Stub::async::GetMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>* MapService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::robot::map::MapResponse, ::robot::map::MapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::robot::map::MapResponse>* MapService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::robot::map::MapChunk>* MapService::Stub::StreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::robot::map::MapChunk>::Create(channel_.get(), rpcmethod_StreamMap_, context, request);
}

void MapService::Stub::async::StreamMap(::grpc::ClientContext* context, const ::robot::map::MapRequest* request, ::grpc::ClientReadReactor< ::robot::map::MapChunk>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::robot::map::MapChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMap_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::robot::map::MapChunk>* MapService::Stub::AsyncStreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::robot::map::MapChunk>::Create(channel_.get(), cq, rpcmethod_StreamMap_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::robot::map::MapChunk>* MapService::Stub::PrepareAsyncStreamMapRaw(::grpc::ClientContext* context, const ::robot::map::MapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::robot::map::MapChunk>::Create(channel_.get(), cq, rpcmethod_StreamMap_, context, request, false, nullptr);
}

MapService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapService::Service, ::robot::map::MapRequest, ::robot::map::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::robot::map::MapRequest* req,
             ::robot::map::MapResponse* resp) {
               return service->GetMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MapService::Service, ::robot::map::MapRequest, ::robot::map::MapChunk>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::robot::map::MapRequest* req,
             ::grpc::ServerWriter<::robot::map::MapChunk>* writer) {
               return service->StreamMap(ctx, req, writer);
             }, this)));
}

MapService::Service::~Service() {
}

::grpc::Status MapService::Service::GetMap(::grpc::ServerContext* context, const ::robot::map::MapRequest* request, ::robot::map::MapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapService::Service::StreamMap(::grpc::ServerContext* context, const ::robot::map::MapRequest* request, ::grpc::ServerWriter< ::robot::map::MapChunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace robot
}  // namespace map

