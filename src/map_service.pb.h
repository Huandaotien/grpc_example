// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5fservice_2eproto;
namespace robot {
namespace map {
class MapChunk;
struct MapChunkDefaultTypeInternal;
extern MapChunkDefaultTypeInternal _MapChunk_default_instance_;
class MapRequest;
struct MapRequestDefaultTypeInternal;
extern MapRequestDefaultTypeInternal _MapRequest_default_instance_;
class MapResponse;
struct MapResponseDefaultTypeInternal;
extern MapResponseDefaultTypeInternal _MapResponse_default_instance_;
}  // namespace map
}  // namespace robot
PROTOBUF_NAMESPACE_OPEN
template<> ::robot::map::MapChunk* Arena::CreateMaybeMessage<::robot::map::MapChunk>(Arena*);
template<> ::robot::map::MapRequest* Arena::CreateMaybeMessage<::robot::map::MapRequest>(Arena*);
template<> ::robot::map::MapResponse* Arena::CreateMaybeMessage<::robot::map::MapResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace robot {
namespace map {

// ===================================================================

class MapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot.map.MapRequest) */ {
 public:
  inline MapRequest() : MapRequest(nullptr) {}
  ~MapRequest() override;
  explicit PROTOBUF_CONSTEXPR MapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRequest(const MapRequest& from);
  MapRequest(MapRequest&& from) noexcept
    : MapRequest() {
    *this = ::std::move(from);
  }

  inline MapRequest& operator=(const MapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRequest& operator=(MapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRequest* internal_default_instance() {
    return reinterpret_cast<const MapRequest*>(
               &_MapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapRequest& a, MapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapRequest& from) {
    MapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot.map.MapRequest";
  }
  protected:
  explicit MapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdFieldNumber = 1,
  };
  // string map_id = 1;
  void clear_map_id();
  const std::string& map_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_id();
  PROTOBUF_NODISCARD std::string* release_map_id();
  void set_allocated_map_id(std::string* map_id);
  private:
  const std::string& _internal_map_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_id(const std::string& value);
  std::string* _internal_mutable_map_id();
  public:

  // @@protoc_insertion_point(class_scope:robot.map.MapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot.map.MapResponse) */ {
 public:
  inline MapResponse() : MapResponse(nullptr) {}
  ~MapResponse() override;
  explicit PROTOBUF_CONSTEXPR MapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapResponse(const MapResponse& from);
  MapResponse(MapResponse&& from) noexcept
    : MapResponse() {
    *this = ::std::move(from);
  }

  inline MapResponse& operator=(const MapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapResponse& operator=(MapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapResponse* internal_default_instance() {
    return reinterpret_cast<const MapResponse*>(
               &_MapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapResponse& a, MapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapResponse& from) {
    MapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot.map.MapResponse";
  }
  protected:
  explicit MapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:robot.map.MapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MapChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot.map.MapChunk) */ {
 public:
  inline MapChunk() : MapChunk(nullptr) {}
  ~MapChunk() override;
  explicit PROTOBUF_CONSTEXPR MapChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapChunk(const MapChunk& from);
  MapChunk(MapChunk&& from) noexcept
    : MapChunk() {
    *this = ::std::move(from);
  }

  inline MapChunk& operator=(const MapChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapChunk& operator=(MapChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapChunk* internal_default_instance() {
    return reinterpret_cast<const MapChunk*>(
               &_MapChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapChunk& a, MapChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(MapChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapChunk& from) {
    MapChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot.map.MapChunk";
  }
  protected:
  explicit MapChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kChunkIdFieldNumber = 2,
    kLastChunkFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 chunk_id = 2;
  void clear_chunk_id();
  int32_t chunk_id() const;
  void set_chunk_id(int32_t value);
  private:
  int32_t _internal_chunk_id() const;
  void _internal_set_chunk_id(int32_t value);
  public:

  // bool last_chunk = 3;
  void clear_last_chunk();
  bool last_chunk() const;
  void set_last_chunk(bool value);
  private:
  bool _internal_last_chunk() const;
  void _internal_set_last_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:robot.map.MapChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t chunk_id_;
    bool last_chunk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapRequest

// string map_id = 1;
inline void MapRequest::clear_map_id() {
  _impl_.map_id_.ClearToEmpty();
}
inline const std::string& MapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:robot.map.MapRequest.map_id)
  return _internal_map_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapRequest::set_map_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:robot.map.MapRequest.map_id)
}
inline std::string* MapRequest::mutable_map_id() {
  std::string* _s = _internal_mutable_map_id();
  // @@protoc_insertion_point(field_mutable:robot.map.MapRequest.map_id)
  return _s;
}
inline const std::string& MapRequest::_internal_map_id() const {
  return _impl_.map_id_.Get();
}
inline void MapRequest::_internal_set_map_id(const std::string& value) {
  
  _impl_.map_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MapRequest::_internal_mutable_map_id() {
  
  return _impl_.map_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MapRequest::release_map_id() {
  // @@protoc_insertion_point(field_release:robot.map.MapRequest.map_id)
  return _impl_.map_id_.Release();
}
inline void MapRequest::set_allocated_map_id(std::string* map_id) {
  if (map_id != nullptr) {
    
  } else {
    
  }
  _impl_.map_id_.SetAllocated(map_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_id_.IsDefault()) {
    _impl_.map_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:robot.map.MapRequest.map_id)
}

// -------------------------------------------------------------------

// MapResponse

// string message = 1;
inline void MapResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& MapResponse::message() const {
  // @@protoc_insertion_point(field_get:robot.map.MapResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:robot.map.MapResponse.message)
}
inline std::string* MapResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:robot.map.MapResponse.message)
  return _s;
}
inline const std::string& MapResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void MapResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* MapResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* MapResponse::release_message() {
  // @@protoc_insertion_point(field_release:robot.map.MapResponse.message)
  return _impl_.message_.Release();
}
inline void MapResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:robot.map.MapResponse.message)
}

// -------------------------------------------------------------------

// MapChunk

// bytes data = 1;
inline void MapChunk::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MapChunk::data() const {
  // @@protoc_insertion_point(field_get:robot.map.MapChunk.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapChunk::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:robot.map.MapChunk.data)
}
inline std::string* MapChunk::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:robot.map.MapChunk.data)
  return _s;
}
inline const std::string& MapChunk::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MapChunk::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MapChunk::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MapChunk::release_data() {
  // @@protoc_insertion_point(field_release:robot.map.MapChunk.data)
  return _impl_.data_.Release();
}
inline void MapChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:robot.map.MapChunk.data)
}

// int32 chunk_id = 2;
inline void MapChunk::clear_chunk_id() {
  _impl_.chunk_id_ = 0;
}
inline int32_t MapChunk::_internal_chunk_id() const {
  return _impl_.chunk_id_;
}
inline int32_t MapChunk::chunk_id() const {
  // @@protoc_insertion_point(field_get:robot.map.MapChunk.chunk_id)
  return _internal_chunk_id();
}
inline void MapChunk::_internal_set_chunk_id(int32_t value) {
  
  _impl_.chunk_id_ = value;
}
inline void MapChunk::set_chunk_id(int32_t value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:robot.map.MapChunk.chunk_id)
}

// bool last_chunk = 3;
inline void MapChunk::clear_last_chunk() {
  _impl_.last_chunk_ = false;
}
inline bool MapChunk::_internal_last_chunk() const {
  return _impl_.last_chunk_;
}
inline bool MapChunk::last_chunk() const {
  // @@protoc_insertion_point(field_get:robot.map.MapChunk.last_chunk)
  return _internal_last_chunk();
}
inline void MapChunk::_internal_set_last_chunk(bool value) {
  
  _impl_.last_chunk_ = value;
}
inline void MapChunk::set_last_chunk(bool value) {
  _internal_set_last_chunk(value);
  // @@protoc_insertion_point(field_set:robot.map.MapChunk.last_chunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace robot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5fservice_2eproto
